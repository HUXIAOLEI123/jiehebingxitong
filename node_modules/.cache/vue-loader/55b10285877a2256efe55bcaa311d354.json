{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\src\\views\\patientManagement\\patientManagement\\components\\tabComponents\\interrupttab4.vue?vue&type=template&id=bdfbe7e6&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\src\\views\\patientManagement\\patientManagement\\components\\tabComponents\\interrupttab4.vue","mtime":1678931188668},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678931310818},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1678931318026},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678931310818},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\index.js","mtime":1678931316857}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}