{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\src\\components\\Editor\\Editor.vue?vue&type=style&index=0&id=0bbcfcef&lang=css&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\src\\components\\Editor\\Editor.vue","mtime":1678931188504},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\css-loader\\dist\\cjs.js","mtime":1678931311747},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1678931317953},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\postcss-loader\\src\\index.js","mtime":1678931314216},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678931310818},{"path":"C:\\Users\\Administrator\\Desktop\\tuberculosis-fe\\node_modules\\vue-loader\\lib\\index.js","mtime":1678931316857}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouUmljaFRleHRFZGl0b3ItV3JhcCAucWwtY29udGFpbmVyIHsNCiAgaGVpZ2h0OiAzMDBweDsNCn0NCg0KLlJpY2hUZXh0RWRpdG9yLVdyYXAgLnFsLWVkaXRvciB7DQogIHBhZGRpbmc6IDA7DQp9DQoNCi5SaWNoVGV4dEVkaXRvci1XcmFwIC5xbC10b29sdGlwIHsNCiAgbGVmdDogNXB4ICFpbXBvcnRhbnQ7DQp9DQo="},{"version":3,"sources":["Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0SA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Editor.vue","sourceRoot":"src/components/Editor","sourcesContent":["<!--富文本编辑器-->\r\n<template>\r\n  <div class=\"RichTextEditor-Wrap\" v-loading=\"loading\">\r\n    <quill-editor\r\n      :content=\"content\"\r\n      :options=\"editorOption\"\r\n      class=\"ql-editor\"\r\n      ref=\"myQuillEditor\"\r\n      @change=\"onEditorChange($event)\"\r\n    ></quill-editor>\r\n\r\n    <!-- 图片上传组件辅助-->\r\n    <el-upload\r\n      v-show=\"false\"\r\n      :show-file-list=\"false\"\r\n      :name=\"uploadImgConfig.name\"\r\n      :multiple=\"false\"\r\n      :action=\"uploadImgConfig.uploadUrl\"\r\n      :before-upload=\"onBeforeUpload\"\r\n      :on-success=\"onSuccess\"\r\n      :on-error=\"onError\"\r\n      :file-list=\"fileList\"\r\n    >\r\n      <button ref=\"myinput\">上传文件</button>\r\n    </el-upload>\r\n\r\n    <!--视频上传-->\r\n    <div>\r\n      <el-dialog\r\n        :close-on-click-modal=\"false\"\r\n        width=\"50%\"\r\n        style=\"margin-top: 1px\"\r\n        title=\"视频上传\"\r\n        :visible.sync=\"videoDialog.show\"\r\n        append-to-body\r\n      >\r\n        <el-tabs v-model=\"videoDialog.activeName\">\r\n          <el-tab-pane label=\"添加视频链接\" name=\"first\">\r\n            <el-input v-model=\"videoDialog.videoLink\" placeholder=\"请输入视频链接\" clearable></el-input>\r\n            <el-button type=\"primary\" size=\"small\" style=\"margin: 20px 0px 0px 0px\" @click=\"addVideoLink(videoDialog.videoLink)\">\r\n              添加\r\n            </el-button>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"本地视频上传\" name=\"second\">\r\n            <el-upload\r\n              style=\"text-align: center\"\r\n              drag\r\n              action=\"\"\r\n              :show-file-list=\"false\"\r\n              :name=\"uploadVideoConfig.name\"\r\n              v-loading=\"loading\"\r\n              accept=\"video/*\"\r\n              :multiple=\"false\"\r\n              :http-request=\"httpRequest\"\r\n            >\r\n              <i class=\"el-icon-upload\"></i>\r\n              <div class=\"el-upload__text\">\r\n                将文件拖到此处，或\r\n                <em>点击上传</em>\r\n              </div>\r\n              <div class=\"el-upload__tip\" slot=\"tip\">只能上传MP4文件，且不超过{{ uploadVideoConfig.maxSize }}M</div>\r\n            </el-upload>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </el-dialog>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n// require styles\r\nimport 'quill/dist/quill.core.css'\r\nimport 'quill/dist/quill.snow.css'\r\nimport 'quill/dist/quill.bubble.css'\r\nimport { quillEditor } from 'vue-quill-editor'\r\n// 设置title\r\nimport { addQuillTitle } from './quill-title.js'\r\nimport { fileStorageInfoupload } from \"@/api/FileStorageInfo.js\";\r\n\r\n// 工具栏\r\nconst toolbarOptions = [\r\n  ['bold', 'italic', 'underline', 'strike'], // toggled buttons\r\n  ['blockquote', 'code-block'],\r\n  [{ 'header': 1 }, { 'header': 2 }],\r\n  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n  [{ 'script': 'sub' }, { 'script': 'super' }], // superscript/subscript\r\n  [{ 'indent': '-1' }, { 'indent': '+1' }], // outdent/indent\r\n  [{ 'direction': 'rtl' }],\r\n  [{ 'size': ['small', false, 'large', 'huge'] }],\r\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n  [{ 'font': [] }],\r\n  [{ 'color': [] }, { 'background': [] }], // dropdown with defaults from theme\r\n  [{ 'align': [] }],\r\n  [{ 'clean': '清除' }], // remove formatting button\r\n  // ['link', 'image', 'video']\r\n  ['image', 'video']\r\n]\r\nexport default {\r\n  name: 'RichTextEditor',\r\n  model: {\r\n    prop: 'content',\r\n    event: 'change'\r\n  },\r\n  components: {\r\n    quillEditor\r\n  },\r\n  props: {\r\n    content: { // 返回的html片段\r\n      type: String,\r\n      default: ''\r\n    },\r\n    uploadImgConfig: { // 图片上传配置 - 若不配置则使用quillEditor默认方式，即base64方式\r\n      type: Object,\r\n      default () {\r\n        return {\r\n          uploadUrl: '', // 图片上传地址\r\n          maxSize: 2, // 图片上传大小限制，默认不超过2M\r\n          name: 'Filedata' // 图片上传字段\r\n        }\r\n      }\r\n    },\r\n    uploadVideoConfig: { // 视频上传配置\r\n      type: Object,\r\n      default () {\r\n        return {\r\n          uploadUrl: '', // 上传地址\r\n          maxSize: 10, // 图片上传大小限制，默认不超过2M\r\n          name: 'Filedata' // 图片上传字段\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    let _self = this;\r\n    return {\r\n      loading: false, // 加载loading\r\n      editorOption: {\r\n        placeholder: '',\r\n        theme: 'snow', // or 'bubble'\r\n        modules: {\r\n          toolbar: {\r\n            container: toolbarOptions, // 工具栏\r\n            handlers: {\r\n              'video': function (value) {\r\n                _self.videoDialog.show = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      // 图片上传变量\r\n      fileList: [],\r\n\r\n      // 视频上传变量\r\n      videoDialog: {\r\n        show: false,\r\n        videoLink: '',\r\n        activeName: 'first'\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    // 初始给编辑器设置title\r\n    addQuillTitle()\r\n\r\n    let toolbar = this.$refs['myQuillEditor'].quill.getModule('toolbar');\r\n    // 是否开启图片上传到服务器功能\r\n    if (this.uploadImgConfig.uploadUrl) {\r\n      toolbar.addHandler('image', this.addImageHandler);\r\n    }\r\n\r\n  },\r\n  methods: {\r\n    // 文本编辑\r\n    onEditorChange ({ quill, html, text }) {\r\n      this.$emit('update:content', html)\r\n      this.$emit('change', html)\r\n    },\r\n    hideLoading () {\r\n      this.loading = false\r\n    },\r\n    // --------- 图片上传相关 start ---------\r\n    addImageHandler (value) {\r\n      if (value) {\r\n        // 触发input框选择图片文件\r\n        this.$refs['myinput'].click();\r\n      } else {\r\n        this.quill.format('image', false)\r\n      }\r\n    },\r\n    // 把已经上传的图片显示回富文本编辑框中\r\n    uploadSuccess (imgurl) {\r\n      let quill = this.$refs['myQuillEditor'].quill\r\n      let range = quill.getSelection()\r\n      let index = 0;\r\n      if (range == null) {\r\n        index = 0;\r\n      } else {\r\n        index = range.index; // 获取光标所在位置\r\n      }\r\n      // 插入\r\n      quill.insertEmbed(index, 'image', imgurl) // imgurl是服务器返回的图片链接地址\r\n      // 调整光标到最后\r\n      quill.setSelection(index + 1)\r\n    },\r\n    // el-文件上传组件\r\n    onBeforeUpload (file) {\r\n      this.loading = true\r\n      let acceptArr = ['image/jpg', 'image/jpeg', 'image/gif', 'image/png']\r\n      const isIMAGE = acceptArr.includes(file.type)\r\n      const isLt1M = file.size / 1024 / 1024 < this.uploadImgConfig.maxSize\r\n      if (!isIMAGE) {\r\n        this.hideLoading()\r\n        this.$message.error('只能插入图片格式!')\r\n      }\r\n      if (!isLt1M) {\r\n        this.hideLoading()\r\n        this.$message.error(`上传文件大小不能超过 ${this.uploadImgConfig.maxSize}MB!`)\r\n      }\r\n      return isLt1M && isIMAGE\r\n    },\r\n    //上传视频\r\n    async httpRequest (file, fileList) {\r\n      let formData = new FormData();\r\n      formData.append(\"files\", file.file)\r\n      //上传\r\n      let res = await fileStorageInfoupload('InspectApplication', '', formData)\r\n      res.Response.forEach((i) => {\r\n        // this.addVideoLink(process.env.VUE_APP_BASE + i.FilePath.slice(8, i.FilePath.length))\r\n        this.addVideoLink(process.env.VUE_APP_BASE + i.FilePath)\r\n      })\r\n    },\r\n    // 文件上传成功时的钩子\r\n    onSuccess (response, file, fileList) { // ---- 注意这部分需要改为对应的返回格式\r\n      this.hideLoading()\r\n      if (response.retCode === '00') {\r\n        this.uploadSuccess(response.url)\r\n      } else {\r\n        this.$message.error('上传失败')\r\n      }\r\n    },\r\n    // 文件上传失败时的钩子\r\n    onError (file, fileList) {\r\n      this.hideLoading()\r\n      this.$message.error('上传失败')\r\n    },\r\n\r\n    // --------- 图片上传相关 end ---------\r\n\r\n    // --------- 视频上传相关 start ---------\r\n\r\n    addVideoLink (videoLink) {\r\n      if (!videoLink) return this.$message.error('请输入视频地址')\r\n      this.videoDialog.show = false\r\n      let quill = this.$refs['myQuillEditor'].quill\r\n      let range = quill.getSelection()\r\n      let index = 0;\r\n      if (range == null) {\r\n        index = 0;\r\n      } else {\r\n        index = range.index;\r\n      }\r\n      // 插入\r\n      quill.insertEmbed(index, 'video', videoLink)\r\n      // 调整光标到最后\r\n      quill.setSelection(index + 1)\r\n    },\r\n\r\n    // el-文件上传组件\r\n    onBeforeUploadVideo (file) {\r\n      this.loading = true\r\n      let acceptArr = ['video/mp4']\r\n      const isVideo = acceptArr.includes(file.type)\r\n      const isLt1M = file.size / 1024 / 1024 < this.uploadVideoConfig.maxSize\r\n      if (!isVideo) {\r\n        this.hideLoading()\r\n        this.$message.error('只能上传mp4格式文件!')\r\n      }\r\n      if (!isLt1M) {\r\n        this.hideLoading()\r\n        this.$message.error(`上传文件大小不能超过 ${this.uploadVideoConfig.maxSize}MB!`)\r\n      }\r\n      return isLt1M && isVideo\r\n    },\r\n    // 文件上传成功时的钩子\r\n    onSuccessVideo (response, file, fileList) { // ---- 注意这部分需要改为对应的返回格式\r\n      this.hideLoading()\r\n      if (response.retCode === '00') {\r\n        this.addVideoLink(response.url)\r\n      } else {\r\n        this.$message.error('上传失败')\r\n      }\r\n    },\r\n    // --------- 视频上传相关 end ---------\r\n  }\r\n}\r\n</script>\r\n<style>\r\n.RichTextEditor-Wrap .ql-container {\r\n  height: 300px;\r\n}\r\n\r\n.RichTextEditor-Wrap .ql-editor {\r\n  padding: 0;\r\n}\r\n\r\n.RichTextEditor-Wrap .ql-tooltip {\r\n  left: 5px !important;\r\n}\r\n</style>\r\n\r\n"]}]}