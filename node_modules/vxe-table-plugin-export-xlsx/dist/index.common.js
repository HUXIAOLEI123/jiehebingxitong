"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginExportXLSX = void 0;

var _xeUtils = _interopRequireDefault(require("xe-utils"));

var ExcelJS = _interopRequireWildcard(require("exceljs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var defaultHeaderBackgroundColor = 'f8f8f9';
var defaultCellFontColor = '606266';
var defaultCellBorderStyle = 'thin';
var defaultCellBorderColor = 'e8eaec';

function getCellLabel(column, cellValue) {
  if (cellValue) {
    switch (column.cellType) {
      case 'string':
        return _xeUtils["default"].toValueString(cellValue);

      case 'number':
        if (!isNaN(cellValue)) {
          return Number(cellValue);
        }

        break;

      default:
        if (cellValue.length < 12 && !isNaN(cellValue)) {
          return Number(cellValue);
        }

        break;
    }
  }

  return cellValue;
}

function getFooterData(opts, footerData) {
  var footerFilterMethod = opts.footerFilterMethod;
  return footerFilterMethod ? footerData.filter(function (items, index) {
    return footerFilterMethod({
      items: items,
      $rowIndex: index
    });
  }) : footerData;
}

function getFooterCellValue($table, opts, rows, column) {
  var cellValue = getCellLabel(column, rows[$table.getVMColumnIndex(column)]);
  return cellValue;
}

function getValidColumn(column) {
  var childNodes = column.childNodes;
  var isColGroup = childNodes && childNodes.length;

  if (isColGroup) {
    return getValidColumn(childNodes[0]);
  }

  return column;
}

function setExcelRowHeight(excelRow, height) {
  if (height) {
    excelRow.height = _xeUtils["default"].floor(height * 0.75, 12);
  }
}

function setExcelCellStyle(excelCell, align) {
  excelCell.protection = {
    locked: false
  };
  excelCell.alignment = {
    vertical: 'middle',
    horizontal: align || 'left'
  };
}

function getDefaultBorderStyle() {
  return {
    top: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    },
    left: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    },
    bottom: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    },
    right: {
      style: defaultCellBorderStyle,
      color: {
        argb: defaultCellBorderColor
      }
    }
  };
}

function exportXLSX(params) {
  var msgKey = 'xlsx';
  var $table = params.$table,
      options = params.options,
      columns = params.columns,
      colgroups = params.colgroups,
      datas = params.datas;
  var $vxe = $table.$vxe,
      rowHeight = $table.rowHeight,
      allHeaderAlign = $table.headerAlign,
      allAlign = $table.align,
      allFooterAlign = $table.footerAlign;
  var modal = $vxe.modal,
      t = $vxe.t;
  var message = options.message,
      sheetName = options.sheetName,
      isHeader = options.isHeader,
      isFooter = options.isFooter,
      isMerge = options.isMerge,
      isColgroup = options.isColgroup,
      original = options.original,
      useStyle = options.useStyle,
      sheetMethod = options.sheetMethod;
  var showMsg = message !== false;
  var mergeCells = $table.getMergeCells();
  var colList = [];
  var footList = [];
  var sheetCols = [];
  var sheetMerges = [];
  var beforeRowCount = 0;
  var colHead = {};
  columns.forEach(function (column) {
    var id = column.id,
        property = column.property,
        renderWidth = column.renderWidth;
    colHead[id] = original ? property : column.getTitle();
    sheetCols.push({
      key: id,
      width: _xeUtils["default"].ceil(renderWidth / 8, 1)
    });
  }); // 处理表头

  if (isHeader) {
    // 处理分组
    if (isColgroup && !original && colgroups) {
      colgroups.forEach(function (cols, rIndex) {
        var groupHead = {};
        columns.forEach(function (column) {
          groupHead[column.id] = null;
        });
        cols.forEach(function (column) {
          var _colSpan = column._colSpan,
              _rowSpan = column._rowSpan;
          var validColumn = getValidColumn(column);
          var columnIndex = columns.indexOf(validColumn);
          groupHead[validColumn.id] = original ? validColumn.property : column.getTitle();

          if (_colSpan > 1 || _rowSpan > 1) {
            sheetMerges.push({
              s: {
                r: rIndex,
                c: columnIndex
              },
              e: {
                r: rIndex + _rowSpan - 1,
                c: columnIndex + _colSpan - 1
              }
            });
          }
        });
        colList.push(groupHead);
      });
    } else {
      colList.push(colHead);
    }

    beforeRowCount += colList.length;
  } // 处理合并


  if (isMerge && !original) {
    mergeCells.forEach(function (mergeItem) {
      var mergeRowIndex = mergeItem.row,
          mergeRowspan = mergeItem.rowspan,
          mergeColIndex = mergeItem.col,
          mergeColspan = mergeItem.colspan;
      sheetMerges.push({
        s: {
          r: mergeRowIndex + beforeRowCount,
          c: mergeColIndex
        },
        e: {
          r: mergeRowIndex + beforeRowCount + mergeRowspan - 1,
          c: mergeColIndex + mergeColspan - 1
        }
      });
    });
  }

  var rowList = datas.map(function (item) {
    var rest = {};
    columns.forEach(function (column) {
      rest[column.id] = getCellLabel(column, item[column.id]);
    });
    return rest;
  });
  beforeRowCount += rowList.length; // 处理表尾

  if (isFooter) {
    var _$table$getTableData = $table.getTableData(),
        footerData = _$table$getTableData.footerData;

    var footers = getFooterData(options, footerData);
    var mergeFooterItems = $table.getMergeFooterItems(); // 处理合并

    if (isMerge && !original) {
      mergeFooterItems.forEach(function (mergeItem) {
        var mergeRowIndex = mergeItem.row,
            mergeRowspan = mergeItem.rowspan,
            mergeColIndex = mergeItem.col,
            mergeColspan = mergeItem.colspan;
        sheetMerges.push({
          s: {
            r: mergeRowIndex + beforeRowCount,
            c: mergeColIndex
          },
          e: {
            r: mergeRowIndex + beforeRowCount + mergeRowspan - 1,
            c: mergeColIndex + mergeColspan - 1
          }
        });
      });
    }

    footers.forEach(function (rows) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = getFooterCellValue($table, options, rows, column);
      });
      footList.push(item);
    });
  }

  var exportMethod = function exportMethod() {
    var workbook = new ExcelJS.Workbook();
    var sheet = workbook.addWorksheet(sheetName);
    workbook.creator = 'vxe-table';
    sheet.columns = sheetCols;

    if (isHeader) {
      sheet.addRows(colList).forEach(function (excelRow) {
        if (useStyle) {
          setExcelRowHeight(excelRow, rowHeight);
        }

        excelRow.eachCell(function (excelCell) {
          var excelCol = sheet.getColumn(excelCell.col);
          var column = $table.getColumnById(excelCol.key);
          var headerAlign = column.headerAlign,
              align = column.align;
          setExcelCellStyle(excelCell, headerAlign || align || allHeaderAlign || allAlign);

          if (useStyle) {
            Object.assign(excelCell, {
              font: {
                bold: true,
                color: {
                  argb: defaultCellFontColor
                }
              },
              fill: {
                type: 'pattern',
                pattern: 'solid',
                fgColor: {
                  argb: defaultHeaderBackgroundColor
                }
              },
              border: getDefaultBorderStyle()
            });
          }
        });
      });
    }

    sheet.addRows(rowList).forEach(function (excelRow) {
      if (useStyle) {
        setExcelRowHeight(excelRow, rowHeight);
      }

      excelRow.eachCell(function (excelCell) {
        var excelCol = sheet.getColumn(excelCell.col);
        var column = $table.getColumnById(excelCol.key);
        var align = column.align;
        setExcelCellStyle(excelCell, align || allAlign);

        if (useStyle) {
          Object.assign(excelCell, {
            font: {
              color: {
                argb: defaultCellFontColor
              }
            },
            border: getDefaultBorderStyle()
          });
        }
      });
    });

    if (isFooter) {
      sheet.addRows(footList).forEach(function (excelRow) {
        if (useStyle) {
          setExcelRowHeight(excelRow, rowHeight);
        }

        excelRow.eachCell(function (excelCell) {
          var excelCol = sheet.getColumn(excelCell.col);
          var column = $table.getColumnById(excelCol.key);
          var footerAlign = column.footerAlign,
              align = column.align;
          setExcelCellStyle(excelCell, footerAlign || align || allFooterAlign || allAlign);

          if (useStyle) {
            Object.assign(excelCell, {
              font: {
                color: {
                  argb: defaultCellFontColor
                }
              },
              border: getDefaultBorderStyle()
            });
          }
        });
      });
    }

    if (useStyle && sheetMethod) {
      var sParams = {
        options: options,
        workbook: workbook,
        worksheet: sheet,
        columns: columns,
        colgroups: colgroups,
        datas: datas,
        $table: $table
      };
      sheetMethod(sParams);
    }

    sheetMerges.forEach(function (_ref) {
      var s = _ref.s,
          e = _ref.e;
      sheet.mergeCells(s.r + 1, s.c + 1, e.r + 1, e.c + 1);
    });
    workbook.xlsx.writeBuffer().then(function (buffer) {
      var blob = new Blob([buffer], {
        type: 'application/octet-stream'
      }); // 导出 xlsx

      downloadFile(params, blob, options);

      if (showMsg && modal) {
        modal.close(msgKey);
        modal.message({
          content: t('vxe.table.expSuccess'),
          status: 'success'
        });
      }
    });
  };

  if (showMsg && modal) {
    modal.message({
      id: msgKey,
      content: t('vxe.table.expLoading'),
      status: 'loading',
      duration: -1
    });
    setTimeout(exportMethod, 1500);
  } else {
    exportMethod();
  }
}

function downloadFile(params, blob, options) {
  var $table = params.$table;
  var $vxe = $table.$vxe;
  var modal = $vxe.modal,
      t = $vxe.t;
  var message = options.message,
      filename = options.filename,
      type = options.type;
  var showMsg = message !== false;

  if (window.Blob) {
    if (navigator.msSaveBlob) {
      navigator.msSaveBlob(blob, "".concat(filename, ".").concat(type));
    } else {
      var linkElem = document.createElement('a');
      linkElem.target = '_blank';
      linkElem.download = "".concat(filename, ".").concat(type);
      linkElem.href = URL.createObjectURL(blob);
      document.body.appendChild(linkElem);
      linkElem.click();
      document.body.removeChild(linkElem);
    }
  } else {
    if (showMsg && modal) {
      modal.alert({
        content: t('vxe.error.notExp'),
        status: 'error'
      });
    }
  }
}

function checkImportData(tableFields, fields) {
  return fields.some(function (field) {
    return tableFields.indexOf(field) > -1;
  });
}

function importError(params) {
  var $table = params.$table,
      options = params.options;
  var $vxe = $table.$vxe,
      _importReject = $table._importReject;
  var showMsg = options.message !== false;
  var modal = $vxe.modal,
      t = $vxe.t;

  if (showMsg && modal) {
    modal.message({
      content: t('vxe.error.impFields'),
      status: 'error'
    });
  }

  if (_importReject) {
    _importReject({
      status: false
    });
  }
}

function importXLSX(params) {
  var $table = params.$table,
      columns = params.columns,
      options = params.options,
      file = params.file;
  var $vxe = $table.$vxe,
      _importResolve = $table._importResolve;
  var modal = $vxe.modal,
      t = $vxe.t;
  var showMsg = options.message !== false;
  var fileReader = new FileReader();

  fileReader.onerror = function () {
    importError(params);
  };

  fileReader.onload = function (evnt) {
    var tableFields = [];
    columns.forEach(function (column) {
      var field = column.property;

      if (field) {
        tableFields.push(field);
      }
    });
    var workbook = new ExcelJS.Workbook();
    var readerTarget = evnt.target;

    if (readerTarget) {
      workbook.xlsx.load(readerTarget.result).then(function (wb) {
        var firstSheet = wb.worksheets[0];

        if (firstSheet) {
          var sheetValues = firstSheet.getSheetValues();

          var fieldIndex = _xeUtils["default"].findIndexOf(sheetValues, function (list) {
            return list && list.length > 0;
          });

          var fields = sheetValues[fieldIndex];
          var status = checkImportData(tableFields, fields);

          if (status) {
            var records = sheetValues.slice(fieldIndex).map(function (list) {
              var item = {};
              list.forEach(function (cellValue, cIndex) {
                item[fields[cIndex]] = cellValue;
              });
              var record = {};
              tableFields.forEach(function (field) {
                record[field] = _xeUtils["default"].isUndefined(item[field]) ? null : item[field];
              });
              return record;
            });
            $table.createData(records).then(function (data) {
              var loadRest;

              if (options.mode === 'insert') {
                loadRest = $table.insertAt(data, -1);
              } else {
                loadRest = $table.reloadData(data);
              }

              return loadRest.then(function () {
                if (_importResolve) {
                  _importResolve({
                    status: true
                  });
                }
              });
            });

            if (showMsg && modal) {
              modal.message({
                content: t('vxe.table.impSuccess', [records.length]),
                status: 'success'
              });
            }
          } else {
            importError(params);
          }
        } else {
          importError(params);
        }
      });
    } else {
      importError(params);
    }
  };

  fileReader.readAsArrayBuffer(file);
}

function handleImportEvent(params) {
  if (params.options.type === 'xlsx') {
    importXLSX(params);
    return false;
  }
}

function handleExportEvent(params) {
  if (params.options.type === 'xlsx') {
    exportXLSX(params);
    return false;
  }
}
/**
 * 基于 vxe-table 表格的增强插件，支持导出 xlsx 格式
 */


var VXETablePluginExportXLSX = {
  install: function install(vxetable) {
    var interceptor = vxetable.interceptor;
    vxetable.setup({
      "export": {
        types: {
          xlsx: 0
        }
      }
    });
    interceptor.mixin({
      'event.import': handleImportEvent,
      'event.export': handleExportEvent
    });
  }
};
exports.VXETablePluginExportXLSX = VXETablePluginExportXLSX;

if (typeof window !== 'undefined' && window.VXETable && window.VXETable.use) {
  window.VXETable.use(VXETablePluginExportXLSX);
}

var _default = VXETablePluginExportXLSX;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIiwiaW5kZXguanMiXSwibmFtZXMiOlsiZGVmYXVsdEhlYWRlckJhY2tncm91bmRDb2xvciIsImRlZmF1bHRDZWxsRm9udENvbG9yIiwiZGVmYXVsdENlbGxCb3JkZXJTdHlsZSIsImRlZmF1bHRDZWxsQm9yZGVyQ29sb3IiLCJnZXRDZWxsTGFiZWwiLCJjb2x1bW4iLCJjZWxsVmFsdWUiLCJjZWxsVHlwZSIsIlhFVXRpbHMiLCJ0b1ZhbHVlU3RyaW5nIiwiaXNOYU4iLCJOdW1iZXIiLCJsZW5ndGgiLCJnZXRGb290ZXJEYXRhIiwib3B0cyIsImZvb3RlckRhdGEiLCJmb290ZXJGaWx0ZXJNZXRob2QiLCJmaWx0ZXIiLCJpdGVtcyIsImluZGV4IiwiJHJvd0luZGV4IiwiZ2V0Rm9vdGVyQ2VsbFZhbHVlIiwiJHRhYmxlIiwicm93cyIsImdldFZNQ29sdW1uSW5kZXgiLCJnZXRWYWxpZENvbHVtbiIsImNoaWxkTm9kZXMiLCJpc0NvbEdyb3VwIiwic2V0RXhjZWxSb3dIZWlnaHQiLCJleGNlbFJvdyIsImhlaWdodCIsImZsb29yIiwic2V0RXhjZWxDZWxsU3R5bGUiLCJleGNlbENlbGwiLCJhbGlnbiIsInByb3RlY3Rpb24iLCJsb2NrZWQiLCJhbGlnbm1lbnQiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJnZXREZWZhdWx0Qm9yZGVyU3R5bGUiLCJ0b3AiLCJzdHlsZSIsImNvbG9yIiwiYXJnYiIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsImV4cG9ydFhMU1giLCJwYXJhbXMiLCJtc2dLZXkiLCJvcHRpb25zIiwiY29sdW1ucyIsImNvbGdyb3VwcyIsImRhdGFzIiwiJHZ4ZSIsInJvd0hlaWdodCIsImFsbEhlYWRlckFsaWduIiwiaGVhZGVyQWxpZ24iLCJhbGxBbGlnbiIsImFsbEZvb3RlckFsaWduIiwiZm9vdGVyQWxpZ24iLCJtb2RhbCIsInQiLCJtZXNzYWdlIiwic2hlZXROYW1lIiwiaXNIZWFkZXIiLCJpc0Zvb3RlciIsImlzTWVyZ2UiLCJpc0NvbGdyb3VwIiwib3JpZ2luYWwiLCJ1c2VTdHlsZSIsInNoZWV0TWV0aG9kIiwic2hvd01zZyIsIm1lcmdlQ2VsbHMiLCJnZXRNZXJnZUNlbGxzIiwiY29sTGlzdCIsImZvb3RMaXN0Iiwic2hlZXRDb2xzIiwic2hlZXRNZXJnZXMiLCJiZWZvcmVSb3dDb3VudCIsImNvbEhlYWQiLCJmb3JFYWNoIiwiaWQiLCJwcm9wZXJ0eSIsInJlbmRlcldpZHRoIiwiZ2V0VGl0bGUiLCJwdXNoIiwia2V5Iiwid2lkdGgiLCJjZWlsIiwiY29scyIsInJJbmRleCIsImdyb3VwSGVhZCIsIl9jb2xTcGFuIiwiX3Jvd1NwYW4iLCJ2YWxpZENvbHVtbiIsImNvbHVtbkluZGV4IiwiaW5kZXhPZiIsInMiLCJyIiwiYyIsImUiLCJtZXJnZUl0ZW0iLCJtZXJnZVJvd0luZGV4Iiwicm93IiwibWVyZ2VSb3dzcGFuIiwicm93c3BhbiIsIm1lcmdlQ29sSW5kZXgiLCJjb2wiLCJtZXJnZUNvbHNwYW4iLCJjb2xzcGFuIiwicm93TGlzdCIsIm1hcCIsIml0ZW0iLCJyZXN0IiwiZ2V0VGFibGVEYXRhIiwiZm9vdGVycyIsIm1lcmdlRm9vdGVySXRlbXMiLCJnZXRNZXJnZUZvb3Rlckl0ZW1zIiwiZXhwb3J0TWV0aG9kIiwid29ya2Jvb2siLCJFeGNlbEpTIiwiV29ya2Jvb2siLCJzaGVldCIsImFkZFdvcmtzaGVldCIsImNyZWF0b3IiLCJhZGRSb3dzIiwiZWFjaENlbGwiLCJleGNlbENvbCIsImdldENvbHVtbiIsImdldENvbHVtbkJ5SWQiLCJPYmplY3QiLCJhc3NpZ24iLCJmb250IiwiYm9sZCIsImZpbGwiLCJ0eXBlIiwicGF0dGVybiIsImZnQ29sb3IiLCJib3JkZXIiLCJzUGFyYW1zIiwid29ya3NoZWV0IiwieGxzeCIsIndyaXRlQnVmZmVyIiwidGhlbiIsImJ1ZmZlciIsImJsb2IiLCJCbG9iIiwiZG93bmxvYWRGaWxlIiwiY2xvc2UiLCJjb250ZW50Iiwic3RhdHVzIiwiZHVyYXRpb24iLCJzZXRUaW1lb3V0IiwiZmlsZW5hbWUiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJtc1NhdmVCbG9iIiwibGlua0VsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0YXJnZXQiLCJkb3dubG9hZCIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwiYWxlcnQiLCJjaGVja0ltcG9ydERhdGEiLCJ0YWJsZUZpZWxkcyIsImZpZWxkcyIsInNvbWUiLCJmaWVsZCIsImltcG9ydEVycm9yIiwiX2ltcG9ydFJlamVjdCIsImltcG9ydFhMU1giLCJmaWxlIiwiX2ltcG9ydFJlc29sdmUiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9uZXJyb3IiLCJvbmxvYWQiLCJldm50IiwicmVhZGVyVGFyZ2V0IiwibG9hZCIsInJlc3VsdCIsIndiIiwiZmlyc3RTaGVldCIsIndvcmtzaGVldHMiLCJzaGVldFZhbHVlcyIsImdldFNoZWV0VmFsdWVzIiwiZmllbGRJbmRleCIsImZpbmRJbmRleE9mIiwibGlzdCIsInJlY29yZHMiLCJzbGljZSIsImNJbmRleCIsInJlY29yZCIsImlzVW5kZWZpbmVkIiwiY3JlYXRlRGF0YSIsImRhdGEiLCJsb2FkUmVzdCIsIm1vZGUiLCJpbnNlcnRBdCIsInJlbG9hZERhdGEiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImhhbmRsZUltcG9ydEV2ZW50IiwiaGFuZGxlRXhwb3J0RXZlbnQiLCJWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1giLCJpbnN0YWxsIiwidnhldGFibGUiLCJpbnRlcmNlcHRvciIsInNldHVwIiwidHlwZXMiLCJtaXhpbiIsIlZYRVRhYmxlIiwidXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSw0QkFBNEIsR0FBRyxRQUFyQztBQUNBLElBQU1DLG9CQUFvQixHQUFHLFFBQTdCO0FBQ0EsSUFBTUMsc0JBQXNCLEdBQUcsTUFBL0I7QUFDQSxJ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QSxLQUFLLEVBQUU7QUFDTDFFLFVBQUFBLElBQUksRUFBRTtBQUREO0FBREQ7QUFESyxLQUFmO0FBT0F3RSxJQUFBQSxXQUFXLENBQUNHLEtBQVosQ0FBa0I7QUFDaEIsc0JBQWdCUixpQkFEQTtBQUVoQixzQkFBZ0JDO0FBRkEsS0FBbEI7QUFJRDtBQWRxQyxDQUFqQzs7O0FBaUJQLElBQUksT0FBT3ZELE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQytELFFBQXhDLElBQW9EL0QsTUFBTSxDQUFDK0QsUUFBUCxDQUFnQkMsR0FBeEUsRUFBNkU7QUFDM0VoRSxFQUFBQSxNQUFNLENBQUMrRCxRQUFQLENBQWdCQyxHQUFoQixDQUFvQlIsd0JBQXBCO0FBQ0Q7O2VBRWNBLHdCIiwiZmlsZSI6ImluZGV4LmNvbW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYRVV0aWxzIGZyb20gJ3hlLXV0aWxzJ1xyXG5pbXBvcnQge1xyXG4gIFZYRVRhYmxlLFxyXG4gIFRhYmxlLFxyXG4gIEludGVyY2VwdG9yRXhwb3J0UGFyYW1zLFxyXG4gIEludGVyY2VwdG9ySW1wb3J0UGFyYW1zLFxyXG4gIENvbHVtbkNvbmZpZyxcclxuICBUYWJsZUV4cG9ydENvbmZpZyxcclxuICBDb2x1bW5BbGlnblxyXG59IGZyb20gJ3Z4ZS10YWJsZSdcclxuaW1wb3J0ICogYXMgRXhjZWxKUyBmcm9tICdleGNlbGpzJ1xyXG5cclxuY29uc3QgZGVmYXVsdEhlYWRlckJhY2tncm91bmRDb2xvciA9ICdmOGY4ZjknXHJcbmNvbnN0IGRlZmF1bHRDZWxsRm9udENvbG9yID0gJzYwNjI2NidcclxuY29uc3QgZGVmYXVsdENlbGxCb3JkZXJTdHlsZSA9ICd0aGluJ1xyXG5jb25zdCBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yID0gJ2U4ZWFlYydcclxuXHJcbmZ1bmN0aW9uIGdldENlbGxMYWJlbCAoY29sdW1uOiBDb2x1bW5Db25maWcsIGNlbGxWYWx1ZTogYW55KSB7XHJcbiAgaWYgKGNlbGxWYWx1ZSkge1xyXG4gICAgc3dpdGNoIChjb2x1bW4uY2VsbFR5cGUpIHtcclxuICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICByZXR1cm4gWEVVdGlscy50b1ZhbHVlU3RyaW5nKGNlbGxWYWx1ZSlcclxuICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICBpZiAoIWlzTmFOKGNlbGxWYWx1ZSkpIHtcclxuICAgICAgICAgIHJldHVybiBOdW1iZXIoY2VsbFZhbHVlKVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGlmIChjZWxsVmFsdWUubGVuZ3RoIDwgMTIgJiYgIWlzTmFOKGNlbGxWYWx1ZSkpIHtcclxuICAgICAgICAgIHJldHVybiBOdW1iZXIoY2VsbFZhbHVlKVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY2VsbFZhbHVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZvb3RlckRhdGEgKG9wdHM6IFRhYmxlRXhwb3J0Q29uZmlnLCBmb290ZXJEYXRhOiBhbnlbXVtdKSB7XHJcbiAgY29uc3QgeyBmb290ZXJGaWx0ZXJNZXRob2QgfSA9IG9wdHNcclxuICByZXR1cm4gZm9vdGVyRmlsdGVyTWV0aG9kID8gZm9vdGVyRGF0YS5maWx0ZXIoKGl0ZW1zLCBpbmRleCkgPT4gZm9vdGVyRmlsdGVyTWV0aG9kKHsgaXRlbXMsICRyb3dJbmRleDogaW5kZXggfSkpIDogZm9vdGVyRGF0YVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGb290ZXJDZWxsVmFsdWUgKCR0YWJsZTogVGFibGUsIG9wdHM6IFRhYmxlRXhwb3J0Q29uZmlnLCByb3dzOiBhbnlbXSwgY29sdW1uOiBDb2x1bW5Db25maWcpIHtcclxuICBjb25zdCBjZWxsVmFsdWUgPSBnZXRDZWxsTGFiZWwoY29sdW1uLCByb3dzWyR0YWJsZS5nZXRWTUNvbHVtbkluZGV4KGNvbHVtbildKVxyXG4gIHJldHVybiBjZWxsVmFsdWVcclxufVxyXG5cclxuZGVjbGFyZSBtb2R1bGUgJ3Z4ZS10YWJsZScge1xyXG4gIGludGVyZmFjZSBDb2x1bW5JbmZvIHtcclxuICAgIF9yb3c6IGFueTtcclxuICAgIF9jb2xTcGFuOiBudW1iZXI7XHJcbiAgICBfcm93U3BhbjogbnVtYmVyO1xyXG4gICAgY2hpbGROb2RlczogQ29sdW1uQ29uZmlnW107XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRWYWxpZENvbHVtbiAoY29sdW1uOiBDb2x1bW5Db25maWcpOiBDb2x1bW5Db25maWcge1xyXG4gIGNvbnN0IHsgY2hpbGROb2RlcyB9ID0gY29sdW1uXHJcbiAgY29uc3QgaXNDb2xHcm91cCA9IGNoaWxkTm9kZXMgJiYgY2hpbGROb2Rlcy5sZW5ndGhcclxuICBpZiAoaXNDb2xHcm91cCkge1xyXG4gICAgcmV0dXJuIGdldFZhbGlkQ29sdW1uKGNoaWxkTm9kZXNbMF0pXHJcbiAgfVxyXG4gIHJldHVybiBjb2x1bW5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0RXhjZWxSb3dIZWlnaHQgKGV4Y2VsUm93OiBFeGNlbEpTLlJvdywgaGVpZ2h0OiBudW1iZXIpIHtcclxuICBpZiAoaGVpZ2h0KSB7XHJcbiAgICBleGNlbFJvdy5oZWlnaHQgPSBYRVV0aWxzLmZsb29yKGhlaWdodCAqIDAuNzUsIDEyKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0RXhjZWxDZWxsU3R5bGUgKGV4Y2VsQ2VsbDogRXhjZWxKUy5DZWxsLCBhbGlnbj86IENvbHVtbkFsaWduKSB7XHJcbiAgZXhjZWxDZWxsLnByb3RlY3Rpb24gPSB7XHJcbiAgICBsb2NrZWQ6IGZhbHNlXHJcbiAgfVxyXG4gIGV4Y2VsQ2VsbC5hbGlnbm1lbnQgPSB7XHJcbiAgICB2ZXJ0aWNhbDogJ21pZGRsZScsXHJcbiAgICBob3Jpem9udGFsOiBhbGlnbiB8fCAnbGVmdCdcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERlZmF1bHRCb3JkZXJTdHlsZSAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRvcDoge1xyXG4gICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcclxuICAgICAgY29sb3I6IHtcclxuICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsZWZ0OiB7XHJcbiAgICAgIHN0eWxlOiBkZWZhdWx0Q2VsbEJvcmRlclN0eWxlLFxyXG4gICAgICBjb2xvcjoge1xyXG4gICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsQm9yZGVyQ29sb3JcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJvdHRvbToge1xyXG4gICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcclxuICAgICAgY29sb3I6IHtcclxuICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByaWdodDoge1xyXG4gICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcclxuICAgICAgY29sb3I6IHtcclxuICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEJvcmRlckNvbG9yXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4cG9ydFhMU1ggKHBhcmFtczogSW50ZXJjZXB0b3JFeHBvcnRQYXJhbXMpIHtcclxuICBjb25zdCBtc2dLZXkgPSAneGxzeCdcclxuICBjb25zdCB7ICR0YWJsZSwgb3B0aW9ucywgY29sdW1ucywgY29sZ3JvdXBzLCBkYXRhcyB9ID0gcGFyYW1zXHJcbiAgY29uc3QgeyAkdnhlLCByb3dIZWlnaHQsIGhlYWRlckFsaWduOiBhbGxIZWFkZXJBbGlnbiwgYWxpZ246IGFsbEFsaWduLCBmb290ZXJBbGlnbjogYWxsRm9vdGVyQWxpZ24gfSA9ICR0YWJsZVxyXG4gIGNvbnN0IHsgbW9kYWwsIHQgfSA9ICR2eGVcclxuICBjb25zdCB7IG1lc3NhZ2UsIHNoZWV0TmFtZSwgaXNIZWFkZXIsIGlzRm9vdGVyLCBpc01lcmdlLCBpc0NvbGdyb3VwLCBvcmlnaW5hbCwgdXNlU3R5bGUsIHNoZWV0TWV0aG9kIH0gPSBvcHRpb25zXHJcbiAgY29uc3Qgc2hvd01zZyA9IG1lc3NhZ2UgIT09IGZhbHNlXHJcbiAgY29uc3QgbWVyZ2VDZWxscyA9ICR0YWJsZS5nZXRNZXJnZUNlbGxzKClcclxuICBjb25zdCBjb2xMaXN0OiBhbnlbXSA9IFtdXHJcbiAgY29uc3QgZm9vdExpc3Q6IGFueVtdID0gW11cclxuICBjb25zdCBzaGVldENvbHM6IGFueVtdID0gW11cclxuICBjb25zdCBzaGVldE1lcmdlczogeyBzOiB7IHI6IG51bWJlciwgYzogbnVtYmVyIH0sIGU6IHsgcjogbnVtYmVyLCBjOiBudW1iZXIgfSB9W10gPSBbXVxyXG4gIGxldCBiZWZvcmVSb3dDb3VudCA9IDBcclxuICBjb25zdCBjb2xIZWFkOiBhbnkgPSB7fVxyXG4gIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XHJcbiAgICBjb25zdCB7IGlkLCBwcm9wZXJ0eSwgcmVuZGVyV2lkdGggfSA9IGNvbHVtblxyXG4gICAgY29sSGVhZFtpZF0gPSBvcmlnaW5hbCA/IHByb3BlcnR5IDogY29sdW1uLmdldFRpdGxlKClcclxuICAgIHNoZWV0Q29scy5wdXNoKHtcclxuICAgICAga2V5OiBpZCxcclxuICAgICAgd2lkdGg6IFhFVXRpbHMuY2VpbChyZW5kZXJXaWR0aCAvIDgsIDEpXHJcbiAgICB9KVxyXG4gIH0pXHJcbiAgLy8g5aSE55CG6KGo5aS0XHJcbiAgaWYgKGlzSGVhZGVyKSB7XHJcbiAgICAvLyDlpITnkIbliIbnu4RcclxuICAgIGlmIChpc0NvbGdyb3VwICYmICFvcmlnaW5hbCAmJiBjb2xncm91cHMpIHtcclxuICAgICAgY29sZ3JvdXBzLmZvckVhY2goKGNvbHMsIHJJbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwSGVhZDogYW55ID0ge31cclxuICAgICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgZ3JvdXBIZWFkW2NvbHVtbi5pZF0gPSBudWxsXHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb2xzLmZvckVhY2goKGNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeyBfY29sU3BhbiwgX3Jvd1NwYW4gfSA9IGNvbHVtblxyXG4gICAgICAgICAgY29uc3QgdmFsaWRDb2x1bW4gPSBnZXRWYWxpZENvbHVtbihjb2x1bW4pXHJcbiAgICAgICAgICBjb25zdCBjb2x1bW5JbmRleCA9IGNvbHVtbnMuaW5kZXhPZih2YWxpZENvbHVtbilcclxuICAgICAgICAgIGdyb3VwSGVhZFt2YWxpZENvbHVtbi5pZF0gPSBvcmlnaW5hbCA/IHZhbGlkQ29sdW1uLnByb3BlcnR5IDogY29sdW1uLmdldFRpdGxlKClcclxuICAgICAgICAgIGlmIChfY29sU3BhbiA+IDEgfHwgX3Jvd1NwYW4gPiAxKSB7XHJcbiAgICAgICAgICAgIHNoZWV0TWVyZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgIHM6IHsgcjogckluZGV4LCBjOiBjb2x1bW5JbmRleCB9LFxyXG4gICAgICAgICAgICAgIGU6IHsgcjogckluZGV4ICsgX3Jvd1NwYW4gLSAxLCBjOiBjb2x1bW5JbmRleCArIF9jb2xTcGFuIC0gMSB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb2xMaXN0LnB1c2goZ3JvdXBIZWFkKVxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29sTGlzdC5wdXNoKGNvbEhlYWQpXHJcbiAgICB9XHJcbiAgICBiZWZvcmVSb3dDb3VudCArPSBjb2xMaXN0Lmxlbmd0aFxyXG4gIH1cclxuICAvLyDlpITnkIblkIjlubZcclxuICBpZiAoaXNNZXJnZSAmJiAhb3JpZ2luYWwpIHtcclxuICAgIG1lcmdlQ2VsbHMuZm9yRWFjaChtZXJnZUl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCB7IHJvdzogbWVyZ2VSb3dJbmRleCwgcm93c3BhbjogbWVyZ2VSb3dzcGFuLCBjb2w6IG1lcmdlQ29sSW5kZXgsIGNvbHNwYW46IG1lcmdlQ29sc3BhbiB9ID0gbWVyZ2VJdGVtXHJcbiAgICAgIHNoZWV0TWVyZ2VzLnB1c2goe1xyXG4gICAgICAgIHM6IHsgcjogbWVyZ2VSb3dJbmRleCArIGJlZm9yZVJvd0NvdW50LCBjOiBtZXJnZUNvbEluZGV4IH0sXHJcbiAgICAgICAgZTogeyByOiBtZXJnZVJvd0luZGV4ICsgYmVmb3JlUm93Q291bnQgKyBtZXJnZVJvd3NwYW4gLSAxLCBjOiBtZXJnZUNvbEluZGV4ICsgbWVyZ2VDb2xzcGFuIC0gMSB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxuICBjb25zdCByb3dMaXN0ID0gZGF0YXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgY29uc3QgcmVzdDogYW55ID0ge31cclxuICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XHJcbiAgICAgIHJlc3RbY29sdW1uLmlkXSA9IGdldENlbGxMYWJlbChjb2x1bW4sIGl0ZW1bY29sdW1uLmlkXSlcclxuICAgIH0pXHJcbiAgICByZXR1cm4gcmVzdFxyXG4gIH0pXHJcbiAgYmVmb3JlUm93Q291bnQgKz0gcm93TGlzdC5sZW5ndGhcclxuICAvLyDlpITnkIbooajlsL5cclxuICBpZiAoaXNGb290ZXIpIHtcclxuICAgIGNvbnN0IHsgZm9vdGVyRGF0YSB9ID0gJHRhYmxlLmdldFRhYmxlRGF0YSgpXHJcbiAgICBjb25zdCBmb290ZXJzID0gZ2V0Rm9vdGVyRGF0YShvcHRpb25zLCBmb290ZXJEYXRhKVxyXG4gICAgY29uc3QgbWVyZ2VGb290ZXJJdGVtcyA9ICR0YWJsZS5nZXRNZXJnZUZvb3Rlckl0ZW1zKClcclxuICAgIC8vIOWkhOeQhuWQiOW5tlxyXG4gICAgaWYgKGlzTWVyZ2UgJiYgIW9yaWdpbmFsKSB7XHJcbiAgICAgIG1lcmdlRm9vdGVySXRlbXMuZm9yRWFjaChtZXJnZUl0ZW0gPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgcm93OiBtZXJnZVJvd0luZGV4LCByb3dzcGFuOiBtZXJnZVJvd3NwYW4sIGNvbDogbWVyZ2VDb2xJbmRleCwgY29sc3BhbjogbWVyZ2VDb2xzcGFuIH0gPSBtZXJnZUl0ZW1cclxuICAgICAgICBzaGVldE1lcmdlcy5wdXNoKHtcclxuICAgICAgICAgIHM6IHsgcjogbWVyZ2VSb3dJbmRleCArIGJlZm9yZVJvd0NvdW50LCBjOiBtZXJnZUNvbEluZGV4IH0sXHJcbiAgICAgICAgICBlOiB7IHI6IG1lcmdlUm93SW5kZXggKyBiZWZvcmVSb3dDb3VudCArIG1lcmdlUm93c3BhbiAtIDEsIGM6IG1lcmdlQ29sSW5kZXggKyBtZXJnZUNvbHNwYW4gLSAxIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgZm9vdGVycy5mb3JFYWNoKChyb3dzKSA9PiB7XHJcbiAgICAgIGNvbnN0IGl0ZW06IGFueSA9IHt9XHJcbiAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XHJcbiAgICAgICAgaXRlbVtjb2x1bW4uaWRdID0gZ2V0Rm9vdGVyQ2VsbFZhbHVlKCR0YWJsZSwgb3B0aW9ucywgcm93cywgY29sdW1uKVxyXG4gICAgICB9KVxyXG4gICAgICBmb290TGlzdC5wdXNoKGl0ZW0pXHJcbiAgICB9KVxyXG4gIH1cclxuICBjb25zdCBleHBvcnRNZXRob2QgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB3b3JrYm9vayA9IG5ldyBFeGNlbEpTLldvcmtib29rKClcclxuICAgIGNvbnN0IHNoZWV0ID0gd29ya2Jvb2suYWRkV29ya3NoZWV0KHNoZWV0TmFtZSlcclxuICAgIHdvcmtib29rLmNyZWF0b3IgPSAndnhlLXRhYmxlJ1xyXG4gICAgc2hlZXQuY29sdW1ucyA9IHNoZWV0Q29sc1xyXG4gICAgaWYgKGlzSGVhZGVyKSB7XHJcbiAgICAgIHNoZWV0LmFkZFJvd3MoY29sTGlzdCkuZm9yRWFjaChleGNlbFJvdyA9PiB7XHJcbiAgICAgICAgaWYgKHVzZVN0eWxlKSB7XHJcbiAgICAgICAgICBzZXRFeGNlbFJvd0hlaWdodChleGNlbFJvdywgcm93SGVpZ2h0KVxyXG4gICAgICAgIH1cclxuICAgICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZXhjZWxDb2wgPSBzaGVldC5nZXRDb2x1bW4oZXhjZWxDZWxsLmNvbClcclxuICAgICAgICAgIGNvbnN0IGNvbHVtbjogYW55ID0gJHRhYmxlLmdldENvbHVtbkJ5SWQoZXhjZWxDb2wua2V5IGFzIHN0cmluZylcclxuICAgICAgICAgIGNvbnN0IHsgaGVhZGVyQWxpZ24sIGFsaWduIH0gPSBjb2x1bW5cclxuICAgICAgICAgIHNldEV4Y2VsQ2VsbFN0eWxlKGV4Y2VsQ2VsbCwgaGVhZGVyQWxpZ24gfHwgYWxpZ24gfHwgYWxsSGVhZGVyQWxpZ24gfHwgYWxsQWxpZ24pXHJcbiAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleGNlbENlbGwsIHtcclxuICAgICAgICAgICAgICBmb250OiB7XHJcbiAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxGb250Q29sb3JcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdwYXR0ZXJuJyxcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICBmZ0NvbG9yOiB7XHJcbiAgICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRIZWFkZXJCYWNrZ3JvdW5kQ29sb3JcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGJvcmRlcjogZ2V0RGVmYXVsdEJvcmRlclN0eWxlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgc2hlZXQuYWRkUm93cyhyb3dMaXN0KS5mb3JFYWNoKGV4Y2VsUm93ID0+IHtcclxuICAgICAgaWYgKHVzZVN0eWxlKSB7XHJcbiAgICAgICAgc2V0RXhjZWxSb3dIZWlnaHQoZXhjZWxSb3csIHJvd0hlaWdodClcclxuICAgICAgfVxyXG4gICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4Y2VsQ29sID0gc2hlZXQuZ2V0Q29sdW1uKGV4Y2VsQ2VsbC5jb2wpXHJcbiAgICAgICAgY29uc3QgY29sdW1uOiBhbnkgPSAkdGFibGUuZ2V0Q29sdW1uQnlJZChleGNlbENvbC5rZXkgYXMgc3RyaW5nKVxyXG4gICAgICAgIGNvbnN0IHsgYWxpZ24gfSA9IGNvbHVtblxyXG4gICAgICAgIHNldEV4Y2VsQ2VsbFN0eWxlKGV4Y2VsQ2VsbCwgYWxpZ24gfHwgYWxsQWxpZ24pXHJcbiAgICAgICAgaWYgKHVzZVN0eWxlKSB7XHJcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGV4Y2VsQ2VsbCwge1xyXG4gICAgICAgICAgICBmb250OiB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsRm9udENvbG9yXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib3JkZXI6IGdldERlZmF1bHRCb3JkZXJTdHlsZSgpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICBpZiAoaXNGb290ZXIpIHtcclxuICAgICAgc2hlZXQuYWRkUm93cyhmb290TGlzdCkuZm9yRWFjaChleGNlbFJvdyA9PiB7XHJcbiAgICAgICAgaWYgKHVzZVN0eWxlKSB7XHJcbiAgICAgICAgICBzZXRFeGNlbFJvd0hlaWdodChleGNlbFJvdywgcm93SGVpZ2h0KVxyXG4gICAgICAgIH1cclxuICAgICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZXhjZWxDb2wgPSBzaGVldC5nZXRDb2x1bW4oZXhjZWxDZWxsLmNvbClcclxuICAgICAgICAgIGNvbnN0IGNvbHVtbjogYW55ID0gJHRhYmxlLmdldENvbHVtbkJ5SWQoZXhjZWxDb2wua2V5IGFzIHN0cmluZylcclxuICAgICAgICAgIGNvbnN0IHsgZm9vdGVyQWxpZ24sIGFsaWduIH0gPSBjb2x1bW5cclxuICAgICAgICAgIHNldEV4Y2VsQ2VsbFN0eWxlKGV4Y2VsQ2VsbCwgZm9vdGVyQWxpZ24gfHwgYWxpZ24gfHwgYWxsRm9vdGVyQWxpZ24gfHwgYWxsQWxpZ24pXHJcbiAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleGNlbENlbGwsIHtcclxuICAgICAgICAgICAgICBmb250OiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjoge1xyXG4gICAgICAgICAgICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEZvbnRDb2xvclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgYm9yZGVyOiBnZXREZWZhdWx0Qm9yZGVyU3R5bGUoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBpZiAodXNlU3R5bGUgJiYgc2hlZXRNZXRob2QpIHtcclxuICAgICAgY29uc3Qgc1BhcmFtcyA9IHsgb3B0aW9uczogb3B0aW9ucyBhcyBhbnksIHdvcmtib29rLCB3b3Jrc2hlZXQ6IHNoZWV0LCBjb2x1bW5zLCBjb2xncm91cHMsIGRhdGFzLCAkdGFibGUgfVxyXG4gICAgICBzaGVldE1ldGhvZChzUGFyYW1zKVxyXG4gICAgfVxyXG4gICAgc2hlZXRNZXJnZXMuZm9yRWFjaCgoeyBzLCBlIH0pID0+IHtcclxuICAgICAgc2hlZXQubWVyZ2VDZWxscyhzLnIgKyAxLCBzLmMgKyAxLCBlLnIgKyAxLCBlLmMgKyAxKVxyXG4gICAgfSlcclxuICAgIHdvcmtib29rLnhsc3gud3JpdGVCdWZmZXIoKS50aGVuKGJ1ZmZlciA9PiB7XHJcbiAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbYnVmZmVyXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB9KVxyXG4gICAgICAvLyDlr7zlh7ogeGxzeFxyXG4gICAgICBkb3dubG9hZEZpbGUocGFyYW1zLCBibG9iLCBvcHRpb25zKVxyXG4gICAgICBpZiAoc2hvd01zZyAmJiBtb2RhbCkge1xyXG4gICAgICAgIG1vZGFsLmNsb3NlKG1zZ0tleSlcclxuICAgICAgICBtb2RhbC5tZXNzYWdlKHsgY29udGVudDogdCgndnhlLnRhYmxlLmV4cFN1Y2Nlc3MnKSBhcyBzdHJpbmcsIHN0YXR1czogJ3N1Y2Nlc3MnIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGlmIChzaG93TXNnICYmIG1vZGFsKSB7XHJcbiAgICBtb2RhbC5tZXNzYWdlKHsgaWQ6IG1zZ0tleSwgY29udGVudDogdCgndnhlLnRhYmxlLmV4cExvYWRpbmcnKSBhcyBzdHJpbmcsIHN0YXR1czogJ2xvYWRpbmcnLCBkdXJhdGlvbjogLTEgfSlcclxuICAgIHNldFRpbWVvdXQoZXhwb3J0TWV0aG9kLCAxNTAwKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBleHBvcnRNZXRob2QoKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG93bmxvYWRGaWxlIChwYXJhbXM6IEludGVyY2VwdG9yRXhwb3J0UGFyYW1zLCBibG9iOiBCbG9iLCBvcHRpb25zOiBUYWJsZUV4cG9ydENvbmZpZykge1xyXG4gIGNvbnN0IHsgJHRhYmxlIH0gPSBwYXJhbXNcclxuICBjb25zdCB7ICR2eGUgfSA9ICR0YWJsZVxyXG4gIGNvbnN0IHsgbW9kYWwsIHQgfSA9ICR2eGVcclxuICBjb25zdCB7IG1lc3NhZ2UsIGZpbGVuYW1lLCB0eXBlIH0gPSBvcHRpb25zXHJcbiAgY29uc3Qgc2hvd01zZyA9IG1lc3NhZ2UgIT09IGZhbHNlXHJcbiAgaWYgKHdpbmRvdy5CbG9iKSB7XHJcbiAgICBpZiAoKG5hdmlnYXRvciBhcyBhbnkpLm1zU2F2ZUJsb2IpIHtcclxuICAgICAgKG5hdmlnYXRvciBhcyBhbnkpLm1zU2F2ZUJsb2IoYmxvYiwgYCR7ZmlsZW5hbWV9LiR7dHlwZX1gKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgbGlua0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcclxuICAgICAgbGlua0VsZW0udGFyZ2V0ID0gJ19ibGFuaydcclxuICAgICAgbGlua0VsZW0uZG93bmxvYWQgPSBgJHtmaWxlbmFtZX0uJHt0eXBlfWBcclxuICAgICAgbGlua0VsZW0uaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rRWxlbSlcclxuICAgICAgbGlua0VsZW0uY2xpY2soKVxyXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmtFbGVtKVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoc2hvd01zZyAmJiBtb2RhbCkge1xyXG4gICAgICBtb2RhbC5hbGVydCh7IGNvbnRlbnQ6IHQoJ3Z4ZS5lcnJvci5ub3RFeHAnKSBhcyBzdHJpbmcsIHN0YXR1czogJ2Vycm9yJyB9KVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tJbXBvcnREYXRhICh0YWJsZUZpZWxkczogc3RyaW5nW10sIGZpZWxkczogc3RyaW5nW10pIHtcclxuICByZXR1cm4gZmllbGRzLnNvbWUoZmllbGQgPT4gdGFibGVGaWVsZHMuaW5kZXhPZihmaWVsZCkgPiAtMSlcclxufVxyXG5cclxuZGVjbGFyZSBtb2R1bGUgJ3Z4ZS10YWJsZScge1xyXG4gIGludGVyZmFjZSBUYWJsZSB7XHJcbiAgICBfaW1wb3J0UmVzb2x2ZT86IEZ1bmN0aW9uIHwgbnVsbDtcclxuICAgIF9pbXBvcnRSZWplY3Q/OiBGdW5jdGlvbiB8IG51bGw7XHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIGltcG9ydEVycm9yIChwYXJhbXM6IEludGVyY2VwdG9ySW1wb3J0UGFyYW1zKSB7XHJcbiAgY29uc3QgeyAkdGFibGUsIG9wdGlvbnMgfSA9IHBhcmFtc1xyXG4gIGNvbnN0IHsgJHZ4ZSwgX2ltcG9ydFJlamVjdCB9ID0gJHRhYmxlXHJcbiAgY29uc3Qgc2hvd01zZyA9IG9wdGlvbnMubWVzc2FnZSAhPT0gZmFsc2VcclxuICBjb25zdCB7IG1vZGFsLCB0IH0gPSAkdnhlXHJcbiAgaWYgKHNob3dNc2cgJiYgbW9kYWwpIHtcclxuICAgIG1vZGFsLm1lc3NhZ2UoeyBjb250ZW50OiB0KCd2eGUuZXJyb3IuaW1wRmllbGRzJykgYXMgc3RyaW5nLCBzdGF0dXM6ICdlcnJvcicgfSlcclxuICB9XHJcbiAgaWYgKF9pbXBvcnRSZWplY3QpIHtcclxuICAgIF9pbXBvcnRSZWplY3QoeyBzdGF0dXM6IGZhbHNlIH0pXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbXBvcnRYTFNYIChwYXJhbXM6IEludGVyY2VwdG9ySW1wb3J0UGFyYW1zKSB7XHJcbiAgY29uc3QgeyAkdGFibGUsIGNvbHVtbnMsIG9wdGlvbnMsIGZpbGUgfSA9IHBhcmFtc1xyXG4gIGNvbnN0IHsgJHZ4ZSwgX2ltcG9ydFJlc29sdmUgfSA9ICR0YWJsZVxyXG4gIGNvbnN0IHsgbW9kYWwsIHQgfSA9ICR2eGVcclxuICBjb25zdCBzaG93TXNnID0gb3B0aW9ucy5tZXNzYWdlICE9PSBmYWxzZVxyXG4gIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXHJcbiAgZmlsZVJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgaW1wb3J0RXJyb3IocGFyYW1zKVxyXG4gIH1cclxuICBmaWxlUmVhZGVyLm9ubG9hZCA9IChldm50KSA9PiB7XHJcbiAgICBjb25zdCB0YWJsZUZpZWxkczogc3RyaW5nW10gPSBbXVxyXG4gICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcclxuICAgICAgY29uc3QgZmllbGQgPSBjb2x1bW4ucHJvcGVydHlcclxuICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgdGFibGVGaWVsZHMucHVzaChmaWVsZClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIGNvbnN0IHdvcmtib29rID0gbmV3IEV4Y2VsSlMuV29ya2Jvb2soKVxyXG4gICAgY29uc3QgcmVhZGVyVGFyZ2V0ID0gZXZudC50YXJnZXRcclxuICAgIGlmIChyZWFkZXJUYXJnZXQpIHtcclxuICAgICAgd29ya2Jvb2sueGxzeC5sb2FkKHJlYWRlclRhcmdldC5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpLnRoZW4od2IgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0U2hlZXQgPSB3Yi53b3Jrc2hlZXRzWzBdXHJcbiAgICAgICAgaWYgKGZpcnN0U2hlZXQpIHtcclxuICAgICAgICAgIGNvbnN0IHNoZWV0VmFsdWVzID0gZmlyc3RTaGVldC5nZXRTaGVldFZhbHVlcygpIGFzIHN0cmluZ1tdW11cclxuICAgICAgICAgIGNvbnN0IGZpZWxkSW5kZXggPSBYRVV0aWxzLmZpbmRJbmRleE9mKHNoZWV0VmFsdWVzLCAobGlzdCkgPT4gbGlzdCAmJiBsaXN0Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICBjb25zdCBmaWVsZHMgPSBzaGVldFZhbHVlc1tmaWVsZEluZGV4XSBhcyBzdHJpbmdbXVxyXG4gICAgICAgICAgY29uc3Qgc3RhdHVzID0gY2hlY2tJbXBvcnREYXRhKHRhYmxlRmllbGRzLCBmaWVsZHMpXHJcbiAgICAgICAgICBpZiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZHMgPSBzaGVldFZhbHVlcy5zbGljZShmaWVsZEluZGV4KS5tYXAobGlzdCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgaXRlbSA6IGFueSA9IHt9XHJcbiAgICAgICAgICAgICAgbGlzdC5mb3JFYWNoKChjZWxsVmFsdWUsIGNJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaXRlbVtmaWVsZHNbY0luZGV4XV0gPSBjZWxsVmFsdWVcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIGNvbnN0IHJlY29yZDogYW55ID0ge31cclxuICAgICAgICAgICAgICB0YWJsZUZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZFtmaWVsZF0gPSBYRVV0aWxzLmlzVW5kZWZpbmVkKGl0ZW1bZmllbGRdKSA/IG51bGwgOiBpdGVtW2ZpZWxkXVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAkdGFibGUuY3JlYXRlRGF0YShyZWNvcmRzKVxyXG4gICAgICAgICAgICAgIC50aGVuKChkYXRhOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxvYWRSZXN0OiBQcm9taXNlPGFueT5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1vZGUgPT09ICdpbnNlcnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgIGxvYWRSZXN0ID0gJHRhYmxlLmluc2VydEF0KGRhdGEsIC0xKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgbG9hZFJlc3QgPSAkdGFibGUucmVsb2FkRGF0YShkYXRhKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRSZXN0LnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoX2ltcG9ydFJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfaW1wb3J0UmVzb2x2ZSh7IHN0YXR1czogdHJ1ZSB9KVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmIChzaG93TXNnICYmIG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgbW9kYWwubWVzc2FnZSh7IGNvbnRlbnQ6IHQoJ3Z4ZS50YWJsZS5pbXBTdWNjZXNzJywgW3JlY29yZHMubGVuZ3RoXSkgYXMgc3RyaW5nLCBzdGF0dXM6ICdzdWNjZXNzJyB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbXBvcnRFcnJvcihwYXJhbXMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGltcG9ydEVycm9yKHBhcmFtcylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbXBvcnRFcnJvcihwYXJhbXMpXHJcbiAgICB9XHJcbiAgfVxyXG4gIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSlcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlSW1wb3J0RXZlbnQgKHBhcmFtczogSW50ZXJjZXB0b3JJbXBvcnRQYXJhbXMpIHtcclxuICBpZiAocGFyYW1zLm9wdGlvbnMudHlwZSA9PT0gJ3hsc3gnKSB7XHJcbiAgICBpbXBvcnRYTFNYKHBhcmFtcylcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRXhwb3J0RXZlbnQgKHBhcmFtczogSW50ZXJjZXB0b3JFeHBvcnRQYXJhbXMpIHtcclxuICBpZiAocGFyYW1zLm9wdGlvbnMudHlwZSA9PT0gJ3hsc3gnKSB7XHJcbiAgICBleHBvcnRYTFNYKHBhcmFtcylcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOWfuuS6jiB2eGUtdGFibGUg6KGo5qC855qE5aKe5by65o+S5Lu277yM5pSv5oyB5a+85Ye6IHhsc3gg5qC85byPXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYID0ge1xyXG4gIGluc3RhbGwgKHZ4ZXRhYmxlOiB0eXBlb2YgVlhFVGFibGUpIHtcclxuICAgIGNvbnN0IHsgaW50ZXJjZXB0b3IgfSA9IHZ4ZXRhYmxlXHJcbiAgICB2eGV0YWJsZS5zZXR1cCh7XHJcbiAgICAgIGV4cG9ydDoge1xyXG4gICAgICAgIHR5cGVzOiB7XHJcbiAgICAgICAgICB4bHN4OiAwXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgaW50ZXJjZXB0b3IubWl4aW4oe1xyXG4gICAgICAnZXZlbnQuaW1wb3J0JzogaGFuZGxlSW1wb3J0RXZlbnQsXHJcbiAgICAgICdldmVudC5leHBvcnQnOiBoYW5kbGVFeHBvcnRFdmVudFxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVlhFVGFibGUgJiYgd2luZG93LlZYRVRhYmxlLnVzZSkge1xyXG4gIHdpbmRvdy5WWEVUYWJsZS51c2UoVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1hcclxuIiwiaW1wb3J0IFhFVXRpbHMgZnJvbSAneGUtdXRpbHMnO1xuaW1wb3J0ICogYXMgRXhjZWxKUyBmcm9tICdleGNlbGpzJztcbmNvbnN0IGRlZmF1bHRIZWFkZXJCYWNrZ3JvdW5kQ29sb3IgPSAnZjhmOGY5JztcbmNvbnN0IGRlZmF1bHRDZWxsRm9udENvbG9yID0gJzYwNjI2Nic7XG5jb25zdCBkZWZhdWx0Q2VsbEJvcmRlclN0eWxlID0gJ3RoaW4nO1xuY29uc3QgZGVmYXVsdENlbGxCb3JkZXJDb2xvciA9ICdlOGVhZWMnO1xuZnVuY3Rpb24gZ2V0Q2VsbExhYmVsKGNvbHVtbiwgY2VsbFZhbHVlKSB7XG4gICAgaWYgKGNlbGxWYWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKGNvbHVtbi5jZWxsVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gWEVVdGlscy50b1ZhbHVlU3RyaW5nKGNlbGxWYWx1ZSk7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oY2VsbFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKGNlbGxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoY2VsbFZhbHVlLmxlbmd0aCA8IDEyICYmICFpc05hTihjZWxsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIoY2VsbFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNlbGxWYWx1ZTtcbn1cbmZ1bmN0aW9uIGdldEZvb3RlckRhdGEob3B0cywgZm9vdGVyRGF0YSkge1xuICAgIGNvbnN0IHsgZm9vdGVyRmlsdGVyTWV0aG9kIH0gPSBvcHRzO1xuICAgIHJldHVybiBmb290ZXJGaWx0ZXJNZXRob2QgPyBmb290ZXJEYXRhLmZpbHRlcigoaXRlbXMsIGluZGV4KSA9PiBmb290ZXJGaWx0ZXJNZXRob2QoeyBpdGVtcywgJHJvd0luZGV4OiBpbmRleCB9KSkgOiBmb290ZXJEYXRhO1xufVxuZnVuY3Rpb24gZ2V0Rm9vdGVyQ2VsbFZhbHVlKCR0YWJsZSwgb3B0cywgcm93cywgY29sdW1uKSB7XG4gICAgY29uc3QgY2VsbFZhbHVlID0gZ2V0Q2VsbExhYmVsKGNvbHVtbiwgcm93c1skdGFibGUuZ2V0Vk1Db2x1bW5JbmRleChjb2x1bW4pXSk7XG4gICAgcmV0dXJuIGNlbGxWYWx1ZTtcbn1cbmZ1bmN0aW9uIGdldFZhbGlkQ29sdW1uKGNvbHVtbikge1xuICAgIGNvbnN0IHsgY2hpbGROb2RlcyB9ID0gY29sdW1uO1xuICAgIGNvbnN0IGlzQ29sR3JvdXAgPSBjaGlsZE5vZGVzICYmIGNoaWxkTm9kZXMubGVuZ3RoO1xuICAgIGlmIChpc0NvbEdyb3VwKSB7XG4gICAgICAgIHJldHVybiBnZXRWYWxpZENvbHVtbihjaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbHVtbjtcbn1cbmZ1bmN0aW9uIHNldEV4Y2VsUm93SGVpZ2h0KGV4Y2VsUm93LCBoZWlnaHQpIHtcbiAgICBpZiAoaGVpZ2h0KSB7XG4gICAgICAgIGV4Y2VsUm93LmhlaWdodCA9IFhFVXRpbHMuZmxvb3IoaGVpZ2h0ICogMC43NSwgMTIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEV4Y2VsQ2VsbFN0eWxlKGV4Y2VsQ2VsbCwgYWxpZ24pIHtcbiAgICBleGNlbENlbGwucHJvdGVjdGlvbiA9IHtcbiAgICAgICAgbG9ja2VkOiBmYWxzZVxuICAgIH07XG4gICAgZXhjZWxDZWxsLmFsaWdubWVudCA9IHtcbiAgICAgICAgdmVydGljYWw6ICdtaWRkbGUnLFxuICAgICAgICBob3Jpem9udGFsOiBhbGlnbiB8fCAnbGVmdCdcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEJvcmRlclN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDoge1xuICAgICAgICAgICAgc3R5bGU6IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUsXG4gICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsQm9yZGVyQ29sb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGVmdDoge1xuICAgICAgICAgICAgc3R5bGU6IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUsXG4gICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsQm9yZGVyQ29sb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYm90dG9tOiB7XG4gICAgICAgICAgICBzdHlsZTogZGVmYXVsdENlbGxCb3JkZXJTdHlsZSxcbiAgICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxCb3JkZXJDb2xvclxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByaWdodDoge1xuICAgICAgICAgICAgc3R5bGU6IGRlZmF1bHRDZWxsQm9yZGVyU3R5bGUsXG4gICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRDZWxsQm9yZGVyQ29sb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBleHBvcnRYTFNYKHBhcmFtcykge1xuICAgIGNvbnN0IG1zZ0tleSA9ICd4bHN4JztcbiAgICBjb25zdCB7ICR0YWJsZSwgb3B0aW9ucywgY29sdW1ucywgY29sZ3JvdXBzLCBkYXRhcyB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHsgJHZ4ZSwgcm93SGVpZ2h0LCBoZWFkZXJBbGlnbjogYWxsSGVhZGVyQWxpZ24sIGFsaWduOiBhbGxBbGlnbiwgZm9vdGVyQWxpZ246IGFsbEZvb3RlckFsaWduIH0gPSAkdGFibGU7XG4gICAgY29uc3QgeyBtb2RhbCwgdCB9ID0gJHZ4ZTtcbiAgICBjb25zdCB7IG1lc3NhZ2UsIHNoZWV0TmFtZSwgaXNIZWFkZXIsIGlzRm9vdGVyLCBpc01lcmdlLCBpc0NvbGdyb3VwLCBvcmlnaW5hbCwgdXNlU3R5bGUsIHNoZWV0TWV0aG9kIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHNob3dNc2cgPSBtZXNzYWdlICE9PSBmYWxzZTtcbiAgICBjb25zdCBtZXJnZUNlbGxzID0gJHRhYmxlLmdldE1lcmdlQ2VsbHMoKTtcbiAgICBjb25zdCBjb2xMaXN0ID0gW107XG4gICAgY29uc3QgZm9vdExpc3QgPSBbXTtcbiAgICBjb25zdCBzaGVldENvbHMgPSBbXTtcbiAgICBjb25zdCBzaGVldE1lcmdlcyA9IFtdO1xuICAgIGxldCBiZWZvcmVSb3dDb3VudCA9IDA7XG4gICAgY29uc3QgY29sSGVhZCA9IHt9O1xuICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaWQsIHByb3BlcnR5LCByZW5kZXJXaWR0aCB9ID0gY29sdW1uO1xuICAgICAgICBjb2xIZWFkW2lkXSA9IG9yaWdpbmFsID8gcHJvcGVydHkgOiBjb2x1bW4uZ2V0VGl0bGUoKTtcbiAgICAgICAgc2hlZXRDb2xzLnB1c2goe1xuICAgICAgICAgICAga2V5OiBpZCxcbiAgICAgICAgICAgIHdpZHRoOiBYRVV0aWxzLmNlaWwocmVuZGVyV2lkdGggLyA4LCAxKVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyDlpITnkIbooajlpLRcbiAgICBpZiAoaXNIZWFkZXIpIHtcbiAgICAgICAgLy8g5aSE55CG5YiG57uEXG4gICAgICAgIGlmIChpc0NvbGdyb3VwICYmICFvcmlnaW5hbCAmJiBjb2xncm91cHMpIHtcbiAgICAgICAgICAgIGNvbGdyb3Vwcy5mb3JFYWNoKChjb2xzLCBySW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cEhlYWQgPSB7fTtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBncm91cEhlYWRbY29sdW1uLmlkXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29scy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBfY29sU3BhbiwgX3Jvd1NwYW4gfSA9IGNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsaWRDb2x1bW4gPSBnZXRWYWxpZENvbHVtbihjb2x1bW4pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW5JbmRleCA9IGNvbHVtbnMuaW5kZXhPZih2YWxpZENvbHVtbik7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSGVhZFt2YWxpZENvbHVtbi5pZF0gPSBvcmlnaW5hbCA/IHZhbGlkQ29sdW1uLnByb3BlcnR5IDogY29sdW1uLmdldFRpdGxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfY29sU3BhbiA+IDEgfHwgX3Jvd1NwYW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGVldE1lcmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOiB7IHI6IHJJbmRleCwgYzogY29sdW1uSW5kZXggfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlOiB7IHI6IHJJbmRleCArIF9yb3dTcGFuIC0gMSwgYzogY29sdW1uSW5kZXggKyBfY29sU3BhbiAtIDEgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2xMaXN0LnB1c2goZ3JvdXBIZWFkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29sTGlzdC5wdXNoKGNvbEhlYWQpO1xuICAgICAgICB9XG4gICAgICAgIGJlZm9yZVJvd0NvdW50ICs9IGNvbExpc3QubGVuZ3RoO1xuICAgIH1cbiAgICAvLyDlpITnkIblkIjlubZcbiAgICBpZiAoaXNNZXJnZSAmJiAhb3JpZ2luYWwpIHtcbiAgICAgICAgbWVyZ2VDZWxscy5mb3JFYWNoKG1lcmdlSXRlbSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHJvdzogbWVyZ2VSb3dJbmRleCwgcm93c3BhbjogbWVyZ2VSb3dzcGFuLCBjb2w6IG1lcmdlQ29sSW5kZXgsIGNvbHNwYW46IG1lcmdlQ29sc3BhbiB9ID0gbWVyZ2VJdGVtO1xuICAgICAgICAgICAgc2hlZXRNZXJnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogeyByOiBtZXJnZVJvd0luZGV4ICsgYmVmb3JlUm93Q291bnQsIGM6IG1lcmdlQ29sSW5kZXggfSxcbiAgICAgICAgICAgICAgICBlOiB7IHI6IG1lcmdlUm93SW5kZXggKyBiZWZvcmVSb3dDb3VudCArIG1lcmdlUm93c3BhbiAtIDEsIGM6IG1lcmdlQ29sSW5kZXggKyBtZXJnZUNvbHNwYW4gLSAxIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgcm93TGlzdCA9IGRhdGFzLm1hcChpdGVtID0+IHtcbiAgICAgICAgY29uc3QgcmVzdCA9IHt9O1xuICAgICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgcmVzdFtjb2x1bW4uaWRdID0gZ2V0Q2VsbExhYmVsKGNvbHVtbiwgaXRlbVtjb2x1bW4uaWRdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN0O1xuICAgIH0pO1xuICAgIGJlZm9yZVJvd0NvdW50ICs9IHJvd0xpc3QubGVuZ3RoO1xuICAgIC8vIOWkhOeQhuihqOWwvlxuICAgIGlmIChpc0Zvb3Rlcikge1xuICAgICAgICBjb25zdCB7IGZvb3RlckRhdGEgfSA9ICR0YWJsZS5nZXRUYWJsZURhdGEoKTtcbiAgICAgICAgY29uc3QgZm9vdGVycyA9IGdldEZvb3RlckRhdGEob3B0aW9ucywgZm9vdGVyRGF0YSk7XG4gICAgICAgIGNvbnN0IG1lcmdlRm9vdGVySXRlbXMgPSAkdGFibGUuZ2V0TWVyZ2VGb290ZXJJdGVtcygpO1xuICAgICAgICAvLyDlpITnkIblkIjlubZcbiAgICAgICAgaWYgKGlzTWVyZ2UgJiYgIW9yaWdpbmFsKSB7XG4gICAgICAgICAgICBtZXJnZUZvb3Rlckl0ZW1zLmZvckVhY2gobWVyZ2VJdGVtID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHJvdzogbWVyZ2VSb3dJbmRleCwgcm93c3BhbjogbWVyZ2VSb3dzcGFuLCBjb2w6IG1lcmdlQ29sSW5kZXgsIGNvbHNwYW46IG1lcmdlQ29sc3BhbiB9ID0gbWVyZ2VJdGVtO1xuICAgICAgICAgICAgICAgIHNoZWV0TWVyZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzOiB7IHI6IG1lcmdlUm93SW5kZXggKyBiZWZvcmVSb3dDb3VudCwgYzogbWVyZ2VDb2xJbmRleCB9LFxuICAgICAgICAgICAgICAgICAgICBlOiB7IHI6IG1lcmdlUm93SW5kZXggKyBiZWZvcmVSb3dDb3VudCArIG1lcmdlUm93c3BhbiAtIDEsIGM6IG1lcmdlQ29sSW5kZXggKyBtZXJnZUNvbHNwYW4gLSAxIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcnMuZm9yRWFjaCgocm93cykgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHt9O1xuICAgICAgICAgICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtW2NvbHVtbi5pZF0gPSBnZXRGb290ZXJDZWxsVmFsdWUoJHRhYmxlLCBvcHRpb25zLCByb3dzLCBjb2x1bW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb290TGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgZXhwb3J0TWV0aG9kID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB3b3JrYm9vayA9IG5ldyBFeGNlbEpTLldvcmtib29rKCk7XG4gICAgICAgIGNvbnN0IHNoZWV0ID0gd29ya2Jvb2suYWRkV29ya3NoZWV0KHNoZWV0TmFtZSk7XG4gICAgICAgIHdvcmtib29rLmNyZWF0b3IgPSAndnhlLXRhYmxlJztcbiAgICAgICAgc2hlZXQuY29sdW1ucyA9IHNoZWV0Q29scztcbiAgICAgICAgaWYgKGlzSGVhZGVyKSB7XG4gICAgICAgICAgICBzaGVldC5hZGRSb3dzKGNvbExpc3QpLmZvckVhY2goZXhjZWxSb3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1c2VTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRFeGNlbFJvd0hlaWdodChleGNlbFJvdywgcm93SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXhjZWxSb3cuZWFjaENlbGwoZXhjZWxDZWxsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhjZWxDb2wgPSBzaGVldC5nZXRDb2x1bW4oZXhjZWxDZWxsLmNvbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9ICR0YWJsZS5nZXRDb2x1bW5CeUlkKGV4Y2VsQ29sLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgaGVhZGVyQWxpZ24sIGFsaWduIH0gPSBjb2x1bW47XG4gICAgICAgICAgICAgICAgICAgIHNldEV4Y2VsQ2VsbFN0eWxlKGV4Y2VsQ2VsbCwgaGVhZGVyQWxpZ24gfHwgYWxpZ24gfHwgYWxsSGVhZGVyQWxpZ24gfHwgYWxsQWxpZ24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXhjZWxDZWxsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxGb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGF0dGVybicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46ICdzb2xpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZnQ29sb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ2I6IGRlZmF1bHRIZWFkZXJCYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBnZXREZWZhdWx0Qm9yZGVyU3R5bGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNoZWV0LmFkZFJvd3Mocm93TGlzdCkuZm9yRWFjaChleGNlbFJvdyA9PiB7XG4gICAgICAgICAgICBpZiAodXNlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzZXRFeGNlbFJvd0hlaWdodChleGNlbFJvdywgcm93SGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4Y2VsUm93LmVhY2hDZWxsKGV4Y2VsQ2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhjZWxDb2wgPSBzaGVldC5nZXRDb2x1bW4oZXhjZWxDZWxsLmNvbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gJHRhYmxlLmdldENvbHVtbkJ5SWQoZXhjZWxDb2wua2V5KTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFsaWduIH0gPSBjb2x1bW47XG4gICAgICAgICAgICAgICAgc2V0RXhjZWxDZWxsU3R5bGUoZXhjZWxDZWxsLCBhbGlnbiB8fCBhbGxBbGlnbik7XG4gICAgICAgICAgICAgICAgaWYgKHVzZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXhjZWxDZWxsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnYjogZGVmYXVsdENlbGxGb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBnZXREZWZhdWx0Qm9yZGVyU3R5bGUoKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpc0Zvb3Rlcikge1xuICAgICAgICAgICAgc2hlZXQuYWRkUm93cyhmb290TGlzdCkuZm9yRWFjaChleGNlbFJvdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEV4Y2VsUm93SGVpZ2h0KGV4Y2VsUm93LCByb3dIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBleGNlbFJvdy5lYWNoQ2VsbChleGNlbENlbGwgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGNlbENvbCA9IHNoZWV0LmdldENvbHVtbihleGNlbENlbGwuY29sKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gJHRhYmxlLmdldENvbHVtbkJ5SWQoZXhjZWxDb2wua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmb290ZXJBbGlnbiwgYWxpZ24gfSA9IGNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgc2V0RXhjZWxDZWxsU3R5bGUoZXhjZWxDZWxsLCBmb290ZXJBbGlnbiB8fCBhbGlnbiB8fCBhbGxGb290ZXJBbGlnbiB8fCBhbGxBbGlnbik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihleGNlbENlbGwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdiOiBkZWZhdWx0Q2VsbEZvbnRDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IGdldERlZmF1bHRCb3JkZXJTdHlsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZVN0eWxlICYmIHNoZWV0TWV0aG9kKSB7XG4gICAgICAgICAgICBjb25zdCBzUGFyYW1zID0geyBvcHRpb25zOiBvcHRpb25zLCB3b3JrYm9vaywgd29ya3NoZWV0OiBzaGVldCwgY29sdW1ucywgY29sZ3JvdXBzLCBkYXRhcywgJHRhYmxlIH07XG4gICAgICAgICAgICBzaGVldE1ldGhvZChzUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBzaGVldE1lcmdlcy5mb3JFYWNoKCh7IHMsIGUgfSkgPT4ge1xuICAgICAgICAgICAgc2hlZXQubWVyZ2VDZWxscyhzLnIgKyAxLCBzLmMgKyAxLCBlLnIgKyAxLCBlLmMgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdvcmtib29rLnhsc3gud3JpdGVCdWZmZXIoKS50aGVuKGJ1ZmZlciA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfSk7XG4gICAgICAgICAgICAvLyDlr7zlh7ogeGxzeFxuICAgICAgICAgICAgZG93bmxvYWRGaWxlKHBhcmFtcywgYmxvYiwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoc2hvd01zZyAmJiBtb2RhbCkge1xuICAgICAgICAgICAgICAgIG1vZGFsLmNsb3NlKG1zZ0tleSk7XG4gICAgICAgICAgICAgICAgbW9kYWwubWVzc2FnZSh7IGNvbnRlbnQ6IHQoJ3Z4ZS50YWJsZS5leHBTdWNjZXNzJyksIHN0YXR1czogJ3N1Y2Nlc3MnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChzaG93TXNnICYmIG1vZGFsKSB7XG4gICAgICAgIG1vZGFsLm1lc3NhZ2UoeyBpZDogbXNnS2V5LCBjb250ZW50OiB0KCd2eGUudGFibGUuZXhwTG9hZGluZycpLCBzdGF0dXM6ICdsb2FkaW5nJywgZHVyYXRpb246IC0xIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KGV4cG9ydE1ldGhvZCwgMTUwMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBleHBvcnRNZXRob2QoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkb3dubG9hZEZpbGUocGFyYW1zLCBibG9iLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyAkdGFibGUgfSA9IHBhcmFtcztcbiAgICBjb25zdCB7ICR2eGUgfSA9ICR0YWJsZTtcbiAgICBjb25zdCB7IG1vZGFsLCB0IH0gPSAkdnhlO1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgZmlsZW5hbWUsIHR5cGUgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2hvd01zZyA9IG1lc3NhZ2UgIT09IGZhbHNlO1xuICAgIGlmICh3aW5kb3cuQmxvYikge1xuICAgICAgICBpZiAobmF2aWdhdG9yLm1zU2F2ZUJsb2IpIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIGAke2ZpbGVuYW1lfS4ke3R5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGxpbmtFbGVtLnRhcmdldCA9ICdfYmxhbmsnO1xuICAgICAgICAgICAgbGlua0VsZW0uZG93bmxvYWQgPSBgJHtmaWxlbmFtZX0uJHt0eXBlfWA7XG4gICAgICAgICAgICBsaW5rRWxlbS5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGlua0VsZW0pO1xuICAgICAgICAgICAgbGlua0VsZW0uY2xpY2soKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGlua0VsZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoc2hvd01zZyAmJiBtb2RhbCkge1xuICAgICAgICAgICAgbW9kYWwuYWxlcnQoeyBjb250ZW50OiB0KCd2eGUuZXJyb3Iubm90RXhwJyksIHN0YXR1czogJ2Vycm9yJyB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrSW1wb3J0RGF0YSh0YWJsZUZpZWxkcywgZmllbGRzKSB7XG4gICAgcmV0dXJuIGZpZWxkcy5zb21lKGZpZWxkID0+IHRhYmxlRmllbGRzLmluZGV4T2YoZmllbGQpID4gLTEpO1xufVxuZnVuY3Rpb24gaW1wb3J0RXJyb3IocGFyYW1zKSB7XG4gICAgY29uc3QgeyAkdGFibGUsIG9wdGlvbnMgfSA9IHBhcmFtcztcbiAgICBjb25zdCB7ICR2eGUsIF9pbXBvcnRSZWplY3QgfSA9ICR0YWJsZTtcbiAgICBjb25zdCBzaG93TXNnID0gb3B0aW9ucy5tZXNzYWdlICE9PSBmYWxzZTtcbiAgICBjb25zdCB7IG1vZGFsLCB0IH0gPSAkdnhlO1xuICAgIGlmIChzaG93TXNnICYmIG1vZGFsKSB7XG4gICAgICAgIG1vZGFsLm1lc3NhZ2UoeyBjb250ZW50OiB0KCd2eGUuZXJyb3IuaW1wRmllbGRzJyksIHN0YXR1czogJ2Vycm9yJyB9KTtcbiAgICB9XG4gICAgaWYgKF9pbXBvcnRSZWplY3QpIHtcbiAgICAgICAgX2ltcG9ydFJlamVjdCh7IHN0YXR1czogZmFsc2UgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW1wb3J0WExTWChwYXJhbXMpIHtcbiAgICBjb25zdCB7ICR0YWJsZSwgY29sdW1ucywgb3B0aW9ucywgZmlsZSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHsgJHZ4ZSwgX2ltcG9ydFJlc29sdmUgfSA9ICR0YWJsZTtcbiAgICBjb25zdCB7IG1vZGFsLCB0IH0gPSAkdnhlO1xuICAgIGNvbnN0IHNob3dNc2cgPSBvcHRpb25zLm1lc3NhZ2UgIT09IGZhbHNlO1xuICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgaW1wb3J0RXJyb3IocGFyYW1zKTtcbiAgICB9O1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gKGV2bnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFibGVGaWVsZHMgPSBbXTtcbiAgICAgICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gY29sdW1uLnByb3BlcnR5O1xuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdGFibGVGaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB3b3JrYm9vayA9IG5ldyBFeGNlbEpTLldvcmtib29rKCk7XG4gICAgICAgIGNvbnN0IHJlYWRlclRhcmdldCA9IGV2bnQudGFyZ2V0O1xuICAgICAgICBpZiAocmVhZGVyVGFyZ2V0KSB7XG4gICAgICAgICAgICB3b3JrYm9vay54bHN4LmxvYWQocmVhZGVyVGFyZ2V0LnJlc3VsdCkudGhlbih3YiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RTaGVldCA9IHdiLndvcmtzaGVldHNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0U2hlZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hlZXRWYWx1ZXMgPSBmaXJzdFNoZWV0LmdldFNoZWV0VmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkSW5kZXggPSBYRVV0aWxzLmZpbmRJbmRleE9mKHNoZWV0VmFsdWVzLCAobGlzdCkgPT4gbGlzdCAmJiBsaXN0Lmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBzaGVldFZhbHVlc1tmaWVsZEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gY2hlY2tJbXBvcnREYXRhKHRhYmxlRmllbGRzLCBmaWVsZHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWNvcmRzID0gc2hlZXRWYWx1ZXMuc2xpY2UoZmllbGRJbmRleCkubWFwKGxpc3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmZvckVhY2goKGNlbGxWYWx1ZSwgY0luZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1bZmllbGRzW2NJbmRleF1dID0gY2VsbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRbZmllbGRdID0gWEVVdGlscy5pc1VuZGVmaW5lZChpdGVtW2ZpZWxkXSkgPyBudWxsIDogaXRlbVtmaWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRhYmxlLmNyZWF0ZURhdGEocmVjb3JkcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb2FkUmVzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tb2RlID09PSAnaW5zZXJ0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkUmVzdCA9ICR0YWJsZS5pbnNlcnRBdChkYXRhLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkUmVzdCA9ICR0YWJsZS5yZWxvYWREYXRhKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9hZFJlc3QudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaW1wb3J0UmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ltcG9ydFJlc29sdmUoeyBzdGF0dXM6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3dNc2cgJiYgbW9kYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5tZXNzYWdlKHsgY29udGVudDogdCgndnhlLnRhYmxlLmltcFN1Y2Nlc3MnLCBbcmVjb3Jkcy5sZW5ndGhdKSwgc3RhdHVzOiAnc3VjY2VzcycgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRFcnJvcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRFcnJvcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW1wb3J0RXJyb3IocGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUltcG9ydEV2ZW50KHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMub3B0aW9ucy50eXBlID09PSAneGxzeCcpIHtcbiAgICAgICAgaW1wb3J0WExTWChwYXJhbXMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXhwb3J0RXZlbnQocGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5vcHRpb25zLnR5cGUgPT09ICd4bHN4Jykge1xuICAgICAgICBleHBvcnRYTFNYKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIOWfuuS6jiB2eGUtdGFibGUg6KGo5qC855qE5aKe5by65o+S5Lu277yM5pSv5oyB5a+85Ye6IHhsc3gg5qC85byPXG4gKi9cbmV4cG9ydCBjb25zdCBWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1ggPSB7XG4gICAgaW5zdGFsbCh2eGV0YWJsZSkge1xuICAgICAgICBjb25zdCB7IGludGVyY2VwdG9yIH0gPSB2eGV0YWJsZTtcbiAgICAgICAgdnhldGFibGUuc2V0dXAoe1xuICAgICAgICAgICAgZXhwb3J0OiB7XG4gICAgICAgICAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeGxzeDogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGludGVyY2VwdG9yLm1peGluKHtcbiAgICAgICAgICAgICdldmVudC5pbXBvcnQnOiBoYW5kbGVJbXBvcnRFdmVudCxcbiAgICAgICAgICAgICdldmVudC5leHBvcnQnOiBoYW5kbGVFeHBvcnRFdmVudFxuICAgICAgICB9KTtcbiAgICB9XG59O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WWEVUYWJsZSAmJiB3aW5kb3cuVlhFVGFibGUudXNlKSB7XG4gICAgd2luZG93LlZYRVRhYmxlLnVzZShWWEVUYWJsZVBsdWdpbkV4cG9ydFhMU1gpO1xufVxuZXhwb3J0IGRlZmF1bHQgVlhFVGFibGVQbHVnaW5FeHBvcnRYTFNYO1xuIl19
